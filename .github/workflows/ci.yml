name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  checks: write
  contents: read
  actions: read
  pull-requests: write

jobs:
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17, 21]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Run tests
      run: mvn clean verify
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload backend coverage to Codecov
      if: matrix.java-version == '17'  # Only upload once to avoid duplicates
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: target/site/jacoco/jacoco.xml
        flags: backend
        name: backend-coverage
        verbose: true
        fail_ci_if_error: false


  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type check
      run: npm run type-check
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false --passWithNoTests
      
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./front/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        verbose: true
        fail_ci_if_error: false
        
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: front/coverage/
        retention-days: 30

  integration-test:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./front
      
    - name: Build frontend
      run: npm run build
      working-directory: ./front
      
    - name: Build backend with frontend
      run: mvn clean package -DskipTests
      
    - name: Run integration tests
      run: mvn verify -Dtest=*IntegrationTest

  code-quality:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
        
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./front
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and analyze Java project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.REPORTR_PLUGIN_SONAR_TOKEN }}
      run: mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=nil-malh_cucumber-reportr_plugin -Dsonar.token=${{ secrets.REPORTR_PLUGIN_SONAR_TOKEN }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.sourceEncoding=UTF-8 -Dsonar.qualitygate.wait=true

    - name: Build and analyze frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.REPORTR_FRONTEND_SONAR_TOKEN }}
      run: |
        cd front
        # Run tests with coverage first
        npm test -- --coverage --watchAll=false --passWithNoTests
        # Verify coverage file exists
        ls -la coverage/lcov.info
        # Build the project
        npm run build
        # Run SonarCloud analysis with properties file
        npx sonar-scanner \
          -Dsonar.projectKey=nil-malh_cucumber-reportr_frontend \
          -Dsonar.organization=nil-malh \
          -Dsonar.sources=src \
          -Dsonar.tests=src/__tests__ \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.REPORTR_FRONTEND_SONAR_TOKEN }} \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
          -Dsonar.test.inclusions="**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx" \
          -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/coverage/**,**/build/**,**/*.config.js,**/*.config.ts,**/vite-env.d.ts,**/setupTests.ts,**/testUtils.ts" \
          -Dsonar.javascript.file.suffixes=.js,.jsx \
          -Dsonar.typescript.file.suffixes=.ts,.tsx \
          -Dsonar.javascript.environments=node,browser,jest \
          -Dsonar.typescript.tsconfigPath=tsconfig.json \
          -Dsonar.qualitygate.wait=true
